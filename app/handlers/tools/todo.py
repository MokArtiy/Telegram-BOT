import asyncio
import uuid
from datetime import datetime

from aiogram import F, html
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from ...database import requests as rq
from ...database.requests import check_ban_user
from ...keyboards import tools_kb
from ...states.states import ToDo
from ...utils import get_media as gm

async def return_to_todo(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await state.clear()    
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–≠—Ç–æ –º–µ–Ω—é –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è', 
        ), 
        reply_markup=tools_kb.todo_main_kb
    ) 

async def todo_main(callback: CallbackQuery):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–≠—Ç–æ –º–µ–Ω—é –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è', 
        ), 
        reply_markup=tools_kb.todo_main_kb
    )

async def return_from_edit_task_kb(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
        
    await state.clear()
    await callback.answer('')
    
    task_id = str(uuid.uuid4())
    user_id = callback.from_user.id
    task = await rq.get_unsave_task(task_id=task_id, user_id=user_id)
    name = task.name if task.name is not None else 'üö´'
    description = '‚úîÔ∏è' if (task.description_text is not None) or (task.description_media is not None) else 'üö´'
    deadline = '‚úîÔ∏è' if task.deadline is not None else 'üö´'
    status = '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if task.task_check is True else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption=f'–≠—Ç–æ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n'
                    f'*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n'
                    f'*–î–µ–¥–ª–∞–π–Ω*: {deadline}\n'
                    f'*–°—Ç–∞—Ç—É—Å*: {status}\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_add_task_kb
    )

async def add_task(callback: CallbackQuery):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
        
    await callback.answer('')
    
    task_id = str(uuid.uuid4())
    user_id = callback.from_user.id
    task = await rq.get_unsave_task(task_id=task_id, user_id=user_id)
    name = task.name if task.name is not None else 'üö´'
    description = '‚úîÔ∏è' if (task.description_text is not None) or (task.description_media is not None) else 'üö´'
    deadline = '‚úîÔ∏è' if task.deadline is not None else 'üö´'
    status = '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if task.task_check is True else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption=f'–≠—Ç–æ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n'
                    f'*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n'
                    f'*–î–µ–¥–ª–∞–π–Ω*: {deadline}\n'
                    f'*–°—Ç–∞—Ç—É—Å*: {status}\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_add_task_kb
    )

async def input_none_value(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    current_state = await state.get_state()
    data = await state.get_data()
    task = await rq.get_unsave_task()
    none_key = 'ac13d5af-391a-40fe-bcb8-9b2095492d66'
    
    if current_state == ToDo.edit_name:
        await rq.task_update_name(task_id=task.task_id, task_name=none_key, user_id=callback.from_user.id)
        await gm.bot.edit_message_media(
            chat_id=callback.from_user.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ),
            reply_markup=tools_kb.return_from_edit_task_kb
        )
        await state.clear()
    elif current_state == ToDo.edit_text:
        await rq.task_update_description_text(task_id=task.task_id, description_text=none_key)
        await gm.bot.edit_message_media(
            chat_id=callback.from_user.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ),
            reply_markup=tools_kb.return_from_edit_description
        )
        await state.clear()
    elif current_state == ToDo.edit_media:
        await rq.task_update_description_media(task_id=task.task_id, description_media=none_key)
        await gm.bot.edit_message_media(
            chat_id=callback.from_user.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=tools_kb.return_from_edit_description
        )
        await state.clear()

#EDIT NAME TASK
async def edit_name_task(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    await state.set_state(ToDo.edited_message_id)
    msg = await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –≤ *100* —Å–∏–º–≤–æ–ª–æ–≤!\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.return_from_input_name
    )
    await state.update_data(edited_message_id=msg.message_id)
    await state.set_state(ToDo.edit_name)
    
async def input_name_task(message: Message, state: FSMContext):
    task_id = (await rq.get_unsave_task()).task_id
    data = await state.get_data()
    
    if message.content_type == 'text':
        if len(message.text) <= 100:
            await rq.task_update_name(task_id=task_id, task_name=message.text, user_id=message.from_user.id)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚úÖ –£—Å–ø–µ—Ö! –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ),
                reply_markup=tools_kb.return_from_edit_task_kb
            )
            await state.clear()
        else:
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å *100* —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                    parse_mode='markdown'
                ),
                reply_markup=tools_kb.return_from_edit_task_kb
            )
    else:
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å *—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç*! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.return_from_edit_task_kb
        )
    
    await message.delete()
    
#EDIT DESCRIPTION TASK
async def return_to_create_description(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await state.clear()
    await callback.answer('')
    
    task = await rq.get_unsave_task()
    text = task.description_text if task.description_text is not None else 'üö´'
    if len(text) > 450: text = '‚úîÔ∏è'
    media = '‚úîÔ∏è' if task.description_media is not None else 'üö´'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–¢–µ–∫—Å—Ç:* {text}\n'
                    f'*–ú–µ–¥–∏–∞:* {media}\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_description_kb
    )

async def edit_description(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer(
        text='‚ö†Ô∏è –°–ü–†–ê–í–ö–ê ‚ö†Ô∏è\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –∏–∑ —Å–µ–±—è –∫–∞–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ (–¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤) '
             '—Å –æ–¥–Ω–∏–º –ª—é–±—ã–º –º–µ–¥–∏–∞, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤).',
        show_alert=True
        )
    
    task = await rq.get_unsave_task()
    text = task.description_text if task.description_text is not None else 'üö´'
    if len(text) > 450: text = '‚úîÔ∏è'
    media = '‚úîÔ∏è' if task.description_media is not None else 'üö´'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–¢–µ–∫—Å—Ç:* `{text}`\n'
                    f'*–ú–µ–¥–∏–∞:* `{media}`\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_description_kb
    )

async def edit_text(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    task = await rq.get_unsave_task()
    if task.description_media is not None and (task.description_media.split())[1] == 'video_note':
        await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫—Ä—É–∂–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é! –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.delete_description_media
        )
    elif task.description_media is not None and (task.description_media.split())[1] == 'voice':
        return await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –≥—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é! –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                parse_mode='markdown'
            ), 
            reply_markup=tools_kb.delete_description_media
        )
    else:
        await state.set_state(ToDo.edited_message_id)
        msg = await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.return_from_input_description
        )
        await state.update_data(edited_message_id=msg.message_id)
        await state.set_state(ToDo.edit_text)

async def input_text(message: Message, state: FSMContext):
    task = await rq.get_unsave_task()
    
    if message.content_type == 'text':
        if (len(message.text) <= 1024 and task.description_media is not None) or (len(message.text) <= 4096 and task.description_media is None):
            data = await state.get_data()
            await rq.task_update_description_text(task_id=task.task_id, description_text=message.text)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚úÖ –£—Å–ø–µ—Ö! –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ),
                reply_markup=tools_kb.return_from_edit_description
            )
            await state.clear()
        else:
            data = await state.get_data()
            if len(message.text) > 1024 and task.description_media is not None:
                await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, *—Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç*, –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å *1024* —Å–∏–º–≤–æ–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                    parse_mode='markdown'
                ),
                reply_markup=tools_kb.return_from_edit_description
            )
            elif len(message.text) > 4096 and task.description_media is None:
                await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è *–±–µ–∑ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞* –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å *4096* —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                    parse_mode='markdown'
                ),
                reply_markup=tools_kb.return_from_edit_description
            )
    else:
        data = await state.get_data()
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚ùå *–¢–µ–∫—Å—Ç–æ–≤–æ–µ* –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ *—Ç–µ–∫—Å—Ç*! –≠—Ç–æ –∂–µ –ª–æ–≥–∏—á–Ω–æ –±–ª–∏–Ω...',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.return_from_edit_description
        )
        
    await message.delete()

async def edit_media(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    await state.set_state(ToDo.edited_message_id)
    msg = await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –º–µ–¥–∏–∞ –∫ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.return_from_input_description
    )
    await state.update_data(edited_message_id=msg.message_id)
    await state.set_state(ToDo.edit_media)

async def input_media(message: Message, state: FSMContext):
    task = await rq.get_unsave_task()
    if message.content_type == 'photo':
        data = await state.get_data()
        description_media = (message.photo[-1]).file_id + ' photo'
        await rq.task_update_description_media(task_id=task.task_id, description_media=description_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=tools_kb.return_from_edit_description
        )
        await state.clear()
    elif message.content_type == 'video':
        data = await state.get_data()
        description_media = message.video.file_id + ' video'
        await rq.task_update_description_media(task_id=task.task_id, description_media=description_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=tools_kb.return_from_edit_description
        )
        await state.clear()
    elif message.content_type == 'video_note':
        await state.update_data(edit_media=message.video_note.file_id + ' video_note')
        data = await state.get_data()
        if task.description_text is not None:
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚ö†Ô∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–æ–º. –£ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ *—Ç–µ–∫—Å—Ç*!'
                            ' –£–¥–∞–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä *—Ç–µ–∫—Å—Ç* –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª!',
                    parse_mode='markdown'
                ), 
                reply_markup=tools_kb.delete_description_text
            )
        else:
            description_media = message.video_note.file_id + ' video_note'
            await rq.task_update_description_media(task_id=task.task_id, description_media=description_media)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ), 
                reply_markup=tools_kb.return_from_edit_description
            )
            await state.clear()
    elif message.content_type == 'audio':
        data = await state.get_data()
        description_media = message.audio.file_id + ' audio'
        await rq.task_update_description_media(task_id=task.task_id, description_media=description_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=tools_kb.return_from_edit_description
        )
        await state.clear()
    elif message.content_type == 'voice':
        await state.update_data(edit_media=message.voice.file_id + ' voice')
        data = await state.get_data()
        if task.description_text is not None:
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚ö†Ô∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Å. –£ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ *—Ç–µ–∫—Å—Ç*!'
                            ' –£–¥–∞–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä *—Ç–µ–∫—Å—Ç* –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª!',
                    parse_mode='markdown'
                ), 
                reply_markup=tools_kb.delete_description_text
            )
        else:
            description_media = message.voice.file_id + ' voice'
            await rq.task_update_description_media(task_id=task.task_id, description_media=description_media)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ), 
                reply_markup=tools_kb.return_from_edit_description
            )
            await state.clear()
    elif message.content_type == 'document':
        data = await state.get_data()
        description_media = message.document.file_id + ' document'
        await rq.task_update_description_media(task_id=task.task_id, description_media=description_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚úÖ –£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=tools_kb.return_from_edit_description
        )
        await state.clear()
    else:
        data = await state.get_data()
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.return_from_edit_description
        )
        
    await message.delete()
    
async def delete_description_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    task_id = (await rq.get_unsave_task()).task_id
    data = await state.get_data()
    await rq.task_update_description_media(task_id=task_id, description_media=data['edit_media'])
    await rq.task_delete_description_text()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!'
        ),
        reply_markup=tools_kb.return_from_edit_description
    )
    await state.clear()
    
async def delete_description_media(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await rq.task_delete_description_media()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!'
        ),
        reply_markup=tools_kb.return_from_edit_description
    )

async def show_description_msg(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    task = await rq.get_unsave_task()
    disable_notification = True
       
    await callback.answer('')
    await callback.message.delete()
    if task.description_media is not None:
        type_media = task.description_media.split(' ')[1]
        media_uid = task.description_media.split(' ')[0]
        if type_media == 'photo':
            await callback.message.answer_photo(
                photo=media_uid,
                caption=task.description_text,
                disable_notification=disable_notification,
                reply_markup=tools_kb.return_from_show_msg
            )
        elif type_media == 'video':
            await callback.message.answer_video(
                video=media_uid,
                caption=task.description_text,
                disable_notification=disable_notification,
                reply_markup=tools_kb.return_from_show_msg
            )
        elif type_media == 'video_note':
            await callback.message.answer_video_note(
                video_note=media_uid,
                disable_notification=disable_notification,
                reply_markup=tools_kb.return_from_show_msg
            )
        elif type_media == 'audio':
            await callback.message.answer_audio(
                audio=media_uid,
                caption=task.description_text,
                disable_notification=disable_notification,
                reply_markup=tools_kb.return_from_show_msg
            )
        elif type_media == 'voice':
            await callback.message.answer_voice(
                voice=media_uid,
                disable_notification=disable_notification,
                reply_markup=tools_kb.return_from_show_msg
            )
        elif type_media == 'document':
            await callback.message.answer_document(
                document=media_uid,
                caption=task.description_text,
                disable_notification=disable_notification,
                reply_markup=tools_kb.return_from_show_msg
            )
    else:
        await callback.message.answer(
            text=task.description_text,
            disable_notification=disable_notification,
            reply_markup=tools_kb.return_from_show_msg
        )
async def return_from_show_msg(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.delete()
    await state.clear()
    
    task = await rq.get_unsave_task()
    text = task.description_text if task.description_text is not None else 'üö´'
    if len(text) > 450: text = '‚úîÔ∏è'
    media = '‚úîÔ∏è' if task.description_media is not None else 'üö´'
    
    await callback.message.answer_photo(
        photo=gm.Media_tg.tools_photo,
        caption='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–¢–µ–∫—Å—Ç:* `{text}`\n'
                    f'*–ú–µ–¥–∏–∞:* `{media}`\n',
        parse_mode='markdown',
        reply_markup=tools_kb.todo_description_kb
    )
    
# INPUT DEADLINE
async def edit_deadline(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    await state.set_state(ToDo.edited_message_id)
    
    msg = await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π üìñ',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.task_deadline_kb
    )
