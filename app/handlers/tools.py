import asyncio
import uuid

from aiogram import F, html
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from ..database import requests as rq
from ..database.requests import check_ban_user
from ..keyboards import tools_kb
from ..states.states import ToDo
from ..utils import get_media as gm

async def return_to_tools(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await state.clear()
    await callback.answer('')
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á!', 
        ), 
        reply_markup=tools_kb.tools_main_kb
    )

async def tools_main_menu(callback: CallbackQuery):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
        
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á!', 
        ), 
        reply_markup=tools_kb.tools_main_kb
    )
    
#TO-DO
async def return_to_todo(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await state.clear()    
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–≠—Ç–æ –º–µ–Ω—é –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è', 
        ), 
        reply_markup=tools_kb.todo_main_kb
    ) 

async def todo_main(callback: CallbackQuery):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–≠—Ç–æ –º–µ–Ω—é –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è', 
        ), 
        reply_markup=tools_kb.todo_main_kb
    )

async def return_from_edit_task_kb(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
        
    await state.clear()
    await callback.answer('')
    
    task_id = str(uuid.uuid4())
    user_id = callback.from_user.id
    task = await rq.get_unsave_task(task_id=task_id, user_id=user_id)
    name = task.name if task.name is not None else 'üö´'
    description = '‚úîÔ∏è' if (task.description_text is not None) or (task.description_media is not None) else 'üö´'
    deadline = '‚úîÔ∏è' if task.deadline is not None else 'üö´'
    status = '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if task.task_check is True else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption=f'–≠—Ç–æ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n'
                    f'*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n'
                    f'*–î–µ–¥–ª–∞–π–Ω*: {deadline}\n'
                    f'*–°—Ç–∞—Ç—É—Å*: {status}\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_add_task_kb
    )

async def add_task(callback: CallbackQuery):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
        
    await callback.answer('')
    
    task_id = str(uuid.uuid4())
    user_id = callback.from_user.id
    task = await rq.get_unsave_task(task_id=task_id, user_id=user_id)
    name = task.name if task.name is not None else 'üö´'
    description = '‚úîÔ∏è' if (task.description_text is not None) or (task.description_media is not None) else 'üö´'
    deadline = '‚úîÔ∏è' if task.deadline is not None else 'üö´'
    status = '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if task.task_check is True else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption=f'–≠—Ç–æ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n'
                    f'*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n'
                    f'*–î–µ–¥–ª–∞–π–Ω*: {deadline}\n'
                    f'*–°—Ç–∞—Ç—É—Å*: {status}\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_add_task_kb
    )

#EDIT NAME TASK
async def edit_name_task(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    await state.set_state(ToDo.edited_message_id)
    msg = await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏, —Ç–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –≤ *100* —Å–∏–º–≤–æ–ª–æ–≤!\n'
                    '```‚ö†Ô∏è–ü—Ä–∏–º–µ—á–µ–Ω–∏–µ‚ö†Ô∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –≤–≤–µ–¥–∏—Ç–µ None```',
            parse_mode='markdown'
        )
    )
    await state.update_data(edited_message_id=msg.message_id)
    await state.set_state(ToDo.edit_name)
    
async def input_name_task(message: Message, state: FSMContext):
    task_id = (await rq.get_unsave_task()).task_id
    data = await state.get_data()
    
    if message.content_type == 'text':
        if len(message.text) <= 100:
            await rq.task_update_name(task_id=task_id, task_name=message.text, user_id=message.from_user.id)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='–£—Å–ø–µ—Ö! –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ),
                reply_markup=tools_kb.return_from_edit_task_kb
            )
            await state.clear()
        else:
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.tools_photo,
                    caption='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å *100* —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                    parse_mode='markdown'
                ),
                reply_markup=tools_kb.return_from_edit_task_kb
            )
    else:
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.return_from_edit_task_kb
        )
    
    await message.delete()
    
#EDIT DESCRIPTION TASK
async def return_to_create_description(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await state.clear()
    await callback.answer('')
    
    task = await rq.get_unsave_task()
    text = task.description_text if task.description_text is not None else 'üö´'
    if len(text) > 450: text = '‚úîÔ∏è'
    media = '‚úîÔ∏è' if task.description_media is not None else 'üö´'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–¢–µ–∫—Å—Ç:* {text}\n'
                    f'*–ú–µ–¥–∏–∞:* {media}\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_description_kb
    )

async def edit_description(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer(
        text='‚ö†Ô∏è –°–ü–†–ê–í–ö–ê ‚ö†Ô∏è\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –∏–∑ —Å–µ–±—è –∫–∞–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ (–¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤) '
             '—Å –æ–¥–Ω–∏–º –ª—é–±—ã–º –º–µ–¥–∏–∞, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤).',
        show_alert=True
        )
    
    task = await rq.get_unsave_task()
    text = task.description_text if task.description_text is not None else 'üö´'
    if len(text) > 450: text = '‚úîÔ∏è'
    media = '‚úîÔ∏è' if task.description_media is not None else 'üö´'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.tools_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è\n\n'
                    f'*–¢–µ–∫—Å—Ç:* `{text}`\n'
                    f'*–ú–µ–¥–∏–∞:* `{media}`\n',
            parse_mode='markdown'
        ),
        reply_markup=tools_kb.todo_description_kb
    )

async def edit_text(callback: CallbackQuery, state: FSMContext):
    if (await check_ban_user(callback.from_user.id)):
        await callback.answer('')
        return await callback.message.answer(
            text=f'–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å '
                 f'[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º](tg://user?id={5034740706}).',
            parse_mode='markdown')
    
    await callback.answer('')
    task = await rq.get_unsave_task()
    if task.description_media is not None and (task.description_media.split())[1] == 'video_note':
        await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='–í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫—Ä—É–∂–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é! –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.delete_media
        )
    elif task.description_media is not None and (task.description_media.split())[1] == 'voice':
        return await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='–í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –≥—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é! –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                parse_mode='markdown'
            ), 
            reply_markup=tools_kb.delete_media
        )
    else:
        await state.set_state(ToDo.edited_message_id)
        msg = await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
                parse_mode='markdown'
            )
        )
        await state.update_data(edited_message_id=msg.message_id)
        await state.set_state(ToDo.edit_text)

async def input_text(message: Message, state: FSMContext):
    task = await rq.get_unsave_task()
    
    if message.content_type == 'text':
        if (len(message.text) <= 1024 and task.description_media is not None) or (len(message.text) <= 4096 and task.description_media is None):
            data = await state.get_data()
            await rq.task_update_description_text(task_id=task.task_id, description_text=message.text)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['edited_message_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='‚úÖ –£—Å–ø–µ—Ö! –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ),
                reply_markup=tools_kb.return_from_edit_description
            )
            await state.clear()
        else:
            data = await state.get_data()
            if len(message.text) > 1024 and task.description_media is not None:
                await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['message_admin_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, *—Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç*, –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å *1024* —Å–∏–º–≤–æ–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                    parse_mode='markdown'
                ),
                reply_markup=tools_kb.return_from_edit_description
            )
            elif len(message.text) <= 4096 and task.description_media is None:
                await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['message_admin_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è *–±–µ–∑ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞* –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å *4096* —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                    parse_mode='markdown'
                ),
                reply_markup=tools_kb.return_from_edit_description
            )
    else:
        data = await state.get_data()
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['edited_message_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.tools_photo,
                caption='‚ùå *–¢–µ–∫—Å—Ç–æ–≤–æ–µ* –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ *—Ç–µ–∫—Å—Ç*! –≠—Ç–æ –∂–µ –ª–æ–≥–∏—á–Ω–æ –±–ª–∏–Ω...',
                parse_mode='markdown'
            ),
            reply_markup=tools_kb.return_from_edit_description
        )
        
    await message.delete()
    
    #–ö –æ–∫–Ω—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ - –Ω–∞–∑–∞–¥ - –Ω–∞ –≥–ª–∞–≤–Ω—É—é - "None", —Ç–æ –∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–¥–µ–ª–∞—Ç—å –∏ —Å –¥—Ä—É–≥–∏–º–∏ –æ–∫–Ω–∞–º–∏