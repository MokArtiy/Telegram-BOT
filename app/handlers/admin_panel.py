import os
from dotenv import load_dotenv
import asyncio
import uuid

from aiogram import F, html
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext

from ..database import requests as rq
from ..keyboards import admin_kb
from ..states.states import AdminPanel
from ..utils import get_media as gm


load_dotenv()
ADMIN_ID = os.getenv('ADMIN_ID')


async def return_to_panel(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    await callback.message.edit_media(
        InputMediaPhoto(
            caption='–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è',
            media=gm.Media_tg.admin_photo
        ),
        reply_markup=admin_kb.main_admin_kb
    )
    
async def return_to_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.delete()
    await state.clear()
    await callback.message.answer_photo(
        photo=gm.Media_tg.admin_photo,
        caption='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '
             '–ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤—ã–±–µ—Ä–µ—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è',
        reply_markup=await admin_kb.users_list()
    )

async def return_to_ban_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.delete()
    await state.clear()
    await callback.message.answer_photo(
        photo=gm.Media_tg.admin_photo,
        caption='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '
             '–ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤—ã–±–µ—Ä–µ—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è',
        reply_markup=await admin_kb.users_bans_list()
    )

async def return_to_sending_msg(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–≠—Ç–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è'
        ),
        reply_markup=admin_kb.main_sending_msg_kb
    )

async def admin_main_menu(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            caption='–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è',
            media=gm.Media_tg.admin_photo
        ),
        reply_markup=admin_kb.main_admin_kb
    )
    
async def admin_users_list(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            caption='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '
                    '–ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤—ã–±–µ—Ä–µ—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è',
            media=gm.Media_tg.admin_photo
        ),
        reply_markup=await admin_kb.users_list()
    )
    
async def get_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(AdminPanel.check_user)
    user_data = await rq.get_userlist_user(callback.data.split('_')[1])
    await state.update_data(check_user=user_data.tg_id)
    if user_data.banned:
        a = '‚úÖ'
    else:
        a = 'Not Banned'
    await callback.message.delete()
    msg = await callback.message.answer(
        text=f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_data.first_name}](tg://user?id={user_data.tg_id})\n'
             f'üëâüèª [—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞](tg://openmessage?user_id={user_data.tg_id}) üëàüèª\n\n'
             f'Telegram ID: `{user_data.tg_id}`\n'
             f'First Name: `{user_data.first_name}`\n'
             f'UserName: `{user_data.username}`\n'
             f'Description: `{user_data.description}`\n'
             f'Phone Number: `{user_data.phone_number}`\n'
             f'Banned: {a}\n',
        reply_markup=admin_kb.user_kb,
        parse_mode='markdown'
    )
    
async def bun_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    
    data = await state.get_data()
    user_tg_id = data["check_user"]
    user_data = await rq.get_userlist_user(user_tg_id=user_tg_id)
    
    if user_tg_id == int(ADMIN_ID):
        msg = await callback.message.answer(text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ–±—è!')
        await asyncio.sleep(5)
        return await msg.delete()
    if user_data.banned == True:
        msg = await callback.message.answer(text='–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!')
        await asyncio.sleep(5)
        return await msg.delete()
    
    update_data = {
        'Description' : None,
        'Phone Number' : None,
        'Banned' : True
    }
    await rq.update_user(user_tg_id=user_tg_id, data=update_data)
        
    await callback.message.edit_text(
        text=f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_data.first_name}](tg://user?id={user_data.tg_id})\n'
             f'üëâüèª [—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞](tg://openmessage?user_id={user_data.tg_id}) üëàüèª\n\n'
             f'Telegram ID: `{user_data.tg_id}`\n'
             f'First Name: `{user_data.first_name}`\n'
             f'UserName: `{user_data.username}`\n'
             f'Description: `{user_data.description}`\n'
             f'Phone Number: `{user_data.phone_number}`\n'
             f'Banned: ‚úÖ',
        reply_markup=admin_kb.user_kb,
        parse_mode='markdown'
    )
    
async def unban_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    
    data = await state.get_data()
    user_tg_id = data["check_user"]
    user_data = await rq.get_userlist_user(user_tg_id=user_tg_id)
    
    if user_tg_id == int(ADMIN_ID):
        msg = await callback.message.answer(text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ–±—è!')
        await asyncio.sleep(5)
        return await msg.delete()
    if user_data.banned == False:
        msg = await callback.message.answer(text='–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–∞–Ω–µ–Ω!')
        await asyncio.sleep(5)
        return await msg.delete()
        
    update_data = {
        'Description' : None,
        'Phone Number' : None,
        'Banned' : False
    }
    await rq.update_user(user_tg_id=user_tg_id, data=update_data)
    await callback.message.edit_text(
        text=f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_data.first_name}](tg://user?id={user_data.tg_id})\n'
             f'üëâüèª [—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞](tg://openmessage?user_id={user_data.tg_id}) üëàüèª\n\n'
             f'Telegram ID: `{user_data.tg_id}`\n'
             f'First Name: `{user_data.first_name}`\n'
             f'UserName: `{user_data.username}`\n'
             f'Description: `{user_data.description}`\n'
             f'Phone Number: `{user_data.phone_number}`\n'
             f'Banned: Not Banned',
        reply_markup=admin_kb.user_kb,
        parse_mode='markdown'
    )
    
async def get_list_banned_users(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '
                    '–ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤—ã–±–µ—Ä–µ—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è'
        ),
        reply_markup=await admin_kb.users_bans_list()
    )

async def get_banned_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(AdminPanel.check_user)
    user_data = await rq.get_userlist_user(callback.data.split('_')[1])
    await state.update_data(check_user=user_data.tg_id)
    if user_data.banned:
        a = '‚úÖ'
    else:
        a = 'Not Banned'
    await callback.message.delete()
    msg = await callback.message.answer(
        text=f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_data.first_name}](tg://user?id={user_data.tg_id})\n'
             f'üëâüèª [—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞](tg://openmessage?user_id={user_data.tg_id}) üëàüèª\n\n'
             f'Telegram ID: `{user_data.tg_id}`\n'
             f'First Name: `{user_data.first_name}`\n'
             f'UserName: `{user_data.username}`\n'
             f'Description: `{user_data.description}`\n'
             f'Phone Number: `{user_data.phone_number}`\n'
             f'Banned: {a}\n',
        reply_markup=admin_kb.banned_user_kb,
        parse_mode='markdown'
    )
    
async def unban_user_in_ban(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    
    data = await state.get_data()
    user_tg_id = data["check_user"]
    user_data = await rq.get_userlist_user(user_tg_id=user_tg_id)
    
    if user_data.banned == False:
        msg = await callback.message.answer(text='–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–∞–Ω–µ–Ω!')
        await asyncio.sleep(5)
        return await msg.delete()
        
    update_data = {
        'Description' : None,
        'Phone Number' : None,
        'Banned' : False
    }
    await rq.update_user(user_tg_id=user_tg_id, data=update_data)
    await callback.message.edit_text(
        text=f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_data.first_name}](tg://user?id={user_data.tg_id})\n'
             f'üëâüèª [—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞](tg://openmessage?user_id={user_data.tg_id}) üëàüèª\n\n'
             f'Telegram ID: `{user_data.tg_id}`\n'
             f'First Name: `{user_data.first_name}`\n'
             f'UserName: `{user_data.username}`\n'
             f'Description: `{user_data.description}`\n'
             f'Phone Number: `{user_data.phone_number}`\n'
             f'Banned: Not Banned',
        reply_markup=admin_kb.banned_user_kb,
        parse_mode='markdown'
    )
    
async def bun_user_in_ban(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')

    data = await state.get_data()
    user_tg_id = data["check_user"]
    user_data = await rq.get_userlist_user(user_tg_id=user_tg_id)
    
    if user_data.banned == True:
        msg = await callback.message.answer(text='–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!')
        await asyncio.sleep(5)
        return await msg.delete()
    
    update_data = {
        'Description' : None,
        'Phone Number' : None,
        'Banned' : True
    }
    await rq.update_user(user_tg_id=user_tg_id, data=update_data)
        
    await callback.message.edit_text(
        text=f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_data.first_name}](tg://user?id={user_data.tg_id})\n'
             f'üëâüèª [—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞](tg://openmessage?user_id={user_data.tg_id}) üëàüèª\n\n'
             f'Telegram ID: `{user_data.tg_id}`\n'
             f'First Name: `{user_data.first_name}`\n'
             f'UserName: `{user_data.username}`\n'
             f'Description: `{user_data.description}`\n'
             f'Phone Number: `{user_data.phone_number}`\n'
             f'Banned: ‚úÖ',
        reply_markup=admin_kb.banned_user_kb,
        parse_mode='markdown'
    )

#SENDING MESSAGE
async def return_to_create_msg(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    
    sending = await rq.get_unsave_sending()
    recipients_mark = await rq.get_recipients_sending(sending_id=sending.sending_id)
    
    text = sending.message_text if sending.message_text is not None else 'üö´'
    if len(text) > 450:
        text = '‚úîÔ∏è'
        
    media = '‚úîÔ∏è' if sending.message_media is not None else 'üö´'
    recipient = '‚úîÔ∏è' if recipients_mark.all() else 'üö´'
    time = sending.sending_time if sending.sending_time is not None else 'üö´'
    status = '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if sending.sending_check is True else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption=f'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
                    f'*–¢–µ–∫—Å—Ç:* {text}\n'
                    f'*–ú–µ–¥–∏–∞:* {media}\n'
                    f'*–õ—é–¥–∏:* {recipient}\n'
                    f'*–í—Ä–µ–º—è:* {time}\n'
                    f'*–°—Ç–∞—Ç—É—Å:* {status}\n',
            parse_mode='markdown'
        ),
        reply_markup=admin_kb.create_sending_kb
    )

async def sending_msg(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–≠—Ç–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è'
        ),
        reply_markup=admin_kb.main_sending_msg_kb
    )

async def create_sending(callback: CallbackQuery):
    await callback.answer('')
    
    sending_id = str(uuid.uuid4())
    sending = await rq.get_unsave_sending(sending_id=sending_id)
    recipients_mark = await rq.get_recipients_sending(sending_id=sending.sending_id)
    
    text = sending.message_text if sending.message_text is not None else 'üö´'
    if len(text) > 450:
        text = '‚úîÔ∏è'
    
    media = '‚úîÔ∏è' if sending.message_media is not None else 'üö´'
    recipient = '‚úîÔ∏è' if recipients_mark.all() else 'üö´'
    time = sending.sending_time if sending.sending_time is not None else 'üö´'
    status = '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if sending.sending_check is True else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption=f'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
                    f'*–¢–µ–∫—Å—Ç:* {text}\n'
                    f'*–ú–µ–¥–∏–∞:* {media}\n'
                    f'*–õ—é–¥–∏:* {recipient}\n'
                    f'*–í—Ä–µ–º—è:* {time}\n'
                    f'*–°—Ç–∞—Ç—É—Å:* {status}\n',
            parse_mode='markdown'
        ),
        reply_markup=admin_kb.create_sending_kb
    )

#edit-text
async def edit_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    sending = await rq.get_unsave_sending()
    if sending.message_media is not None and (sending.message_media.split())[1] == 'video_note':
        await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫—Ä—É–∂–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é! –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                parse_mode='markdown'
            ), 
            reply_markup=admin_kb.delete_media
    )
    elif sending.message_media is not None and (sending.message_media.split())[1] == 'voice':
        return await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –≥—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é! –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                parse_mode='markdown'
            ), 
            reply_markup=admin_kb.delete_media
    )
    else:
        await state.set_state(AdminPanel.message_admin_id)
        msg = await callback.message.edit_media(
            InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, —Ç–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –≤ *1024* —Å–∏–º–≤–æ–ª–∞!',
                parse_mode='markdown'
            )
        )
        await state.update_data(message_admin_id=msg.message_id)
        await state.set_state(AdminPanel.edit_text)
    
async def input_text(message: Message, state: FSMContext):
    sending_id = (await rq.get_unsave_sending()).sending_id
    if len(message.text) <= 1024:
        data = await state.get_data()
        await rq.update_text(sending_id=sending_id, message_text=message.text)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–£—Å–ø–µ—Ö! –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω!'
            ),
            reply_markup=admin_kb.return_from_edit_kb
        )
        await state.clear()
    else:
        data = await state.get_data()
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å *1024* —Å–∏–º–≤–æ–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                parse_mode='markdown'
            ),
            reply_markup=admin_kb.return_from_edit_kb
        )
    
    await message.delete()

#edit-media    
async def edit_media(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(AdminPanel.message_admin_id)
    msg = await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∫—Ä—É–∂–æ–∫, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç',
            parse_mode='markdown'
        )
    )
    await state.update_data(message_admin_id=msg.message_id)
    await state.set_state(AdminPanel.edit_media)

async def input_media(message: Message, state: FSMContext):
    sending = await rq.get_unsave_sending()
    if message.content_type == 'photo':
        data = await state.get_data()
        message_media = (message.photo[-1]).file_id + ' photo'
        await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=admin_kb.return_from_edit_kb
        )
        await state.clear()
    elif message.content_type == 'video':
        data = await state.get_data()
        message_media = message.video.file_id + ' video'
        await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=admin_kb.return_from_edit_kb
        )
        await state.clear()
    elif message.content_type == 'video_note':
        await state.update_data(edit_media=message.video_note.file_id + ' video_note')
        data = await state.get_data()
        if sending.message_text is not None:
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['message_admin_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–æ–º. –£ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ *—Ç–µ–∫—Å—Ç*!'
                            '–£–¥–∞–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä *—Ç–µ–∫—Å—Ç* –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª!',
                    parse_mode='markdown'
                ), 
                reply_markup=admin_kb.delete_text
            )
        else:
            message_media = message.video_note.file_id + ' video_note'
            await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['message_admin_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ), 
                reply_markup=admin_kb.return_from_edit_kb
            )
            await state.clear()
    elif message.content_type == 'audio':
        data = await state.get_data()
        message_media = message.audio.file_id + ' audio'
        await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=admin_kb.return_from_edit_kb
        )
        await state.clear()
    elif message.content_type == 'voice':
        await state.update_data(edit_media=message.voice.file_id + ' voice')
        data = await state.get_data()
        if sending.message_text is not None:
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['message_admin_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Å. –£ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ *—Ç–µ–∫—Å—Ç*!'
                            '–£–¥–∞–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä *—Ç–µ–∫—Å—Ç* –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª!',
                    parse_mode='markdown'
                ), 
                reply_markup=admin_kb.delete_text
            )
        else:
            message_media = message.voice.file_id + ' voice'
            await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
            await gm.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=data['message_admin_id'],
                media=InputMediaPhoto(
                    media=gm.Media_tg.admin_photo,
                    caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
                ), 
                reply_markup=admin_kb.return_from_edit_kb
            )
            await state.clear()
    elif message.content_type == 'document':
        data = await state.get_data()
        message_media = message.document.file_id + ' document'
        await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=admin_kb.return_from_edit_kb
        )
        await state.clear()
    elif message.content_type == 'text' and message.text == 'None':
        data = await state.get_data()
        message_media = message.text
        await rq.update_media(sending_id=sending.sending_id, message_media=message_media)
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–£—Å–ø–µ—Ö! –ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
            ), 
            reply_markup=admin_kb.return_from_edit_kb
        )
        await state.clear()
    else:
        data = await state.get_data()
        await gm.bot.edit_message_media(
            chat_id=message.chat.id,
            message_id=data['message_admin_id'],
            media=InputMediaPhoto(
                media=gm.Media_tg.admin_photo,
                caption='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...',
                parse_mode='markdown'
            ),
            reply_markup=admin_kb.return_from_edit_kb
        )
        
    await message.delete()
    
async def delete_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    sending_id = (await rq.get_unsave_sending()).sending_id
    data = await state.get_data()
    await rq.update_media(sending_id=sending_id, message_media=data['edit_media'])
    await rq.delete_text()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!'
        ),
        reply_markup=admin_kb.return_from_edit_kb
    )
    await state.clear()
    
async def delete_media(callback: CallbackQuery):
    await callback.answer('')
    await rq.delete_media()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!'
        ),
        reply_markup=admin_kb.return_from_edit_kb
    )

#edit-recipients
async def return_to_recipients(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ‚¨áÔ∏è'
        ),
        reply_markup=admin_kb.edit_recipients_kb
    )

async def edit_recipients(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ‚¨áÔ∏è'
        ),
        reply_markup=admin_kb.edit_recipients_kb
    )

async def choose_preset(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–∏–∂–µ ‚¨áÔ∏è'
        ),
        reply_markup=await admin_kb.ready_presets_list()
    )
    
async def choose_save_preset(callback: CallbackQuery):
    sending_id = (await rq.get_unsave_sending()).sending_id
    sending_preset_id = await rq.get_sending_preset_id(sending_id=sending_id)
    if sending_preset_id is not None and sending_preset_id == callback.data.split('_')[1]:
        await callback.answer('–≠—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω!', show_alert=True)
    else:
        if callback.data.split('_')[1] == 'ALL':
            sending_id = (await rq.get_unsave_sending()).sending_id
            await rq.add_recipient_all_preset(sending_id=sending_id)
        
        await rq.update_sending_preset(sending_id=sending_id, preset_id=callback.data.split('_')[1])
        await callback.answer('–ü—Ä–µ—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω!', show_alert=True)

async def delete_current_preset(callback: CallbackQuery):
    sending_id = (await rq.get_unsave_sending()).sending_id
    sending_preset_id = await rq.get_sending_preset_id(sending_id=sending_id)
    if sending_preset_id is not None:
        await rq.remove_current_preset(sending_id=sending_id, preset_id=sending_preset_id)
        await callback.answer('–¢–µ–∫—É—â–∏–π –ø—Ä–µ—Å–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!', show_alert=True)
    else:
        await callback.answer('–£ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞!', show_alert=True)

#manage-presets
async def return_to_manage_presets(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–í—ã –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è'
        ),
        reply_markup=await admin_kb.presets_list()
    )

async def manage_presets(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption='–í—ã –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏.\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è'
        ),
        reply_markup=await admin_kb.presets_list()
    )
    
async def create_preset(callback: CallbackQuery):
    await callback.answer('')
    
    preset_id = str(uuid.uuid4())
    preset = await rq.get_unsave_presets(preset_id=preset_id)
    
    preset_name = preset.preset_name if preset.preset_name is not None else 'üö´'
    if (await rq.get_recipients_preset(preset_id=preset.preset_id)).all():
        recipients = (await rq.get_recipients_preset(preset_id=preset.preset_id)).all()
    else:
        recipients = 'üö´'
    
    await callback.message.edit_media(
        InputMediaPhoto(
            media=gm.Media_tg.admin_photo,
            caption=f'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n\n'
                    f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {preset_name}\n'
                    f'*–õ—é–¥–∏:* {recipients}\n',
            parse_mode='markdown'
        ),
        reply_markup=admin_kb.create_preset_kb
    )